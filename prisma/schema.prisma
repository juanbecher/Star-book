// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    books         UserXBook[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserXBook {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])
    bookId String
    book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
    state  String
}

model Book {
    id            String      @id @default(cuid())
    googleBooksId String      @unique
    title         String
    subtitle      String?
    description   String?
    authors       String[]
    publisher     String?
    publishedDate String?
    pageCount     Int?
    categories    String[]
    averageRating Float?
    ratingsCount  Int?
    imageUrl      String?
    comments      Comment[]
    userBooks     UserXBook[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    rating    Int? // Optional rating from 1-5
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    bookId    String
    book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
